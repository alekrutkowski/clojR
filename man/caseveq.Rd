% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cond_case.R
\name{caseveq}
\alias{caseveq}
\title{A vectorised version of clojR::case (with `==` function)}
\usage{
caseveq(obj, ...)
}
\arguments{
\item{obj}{An object/value.}

\item{...}{An odd number of expressions. A set of test/expression
pairs plus an expression to be evalauted if all tests fail. Equivalent
of nested \code{ifelse(x == a, b, c)} calls, where \code{x} are elements
of the \code{obj} vector.}
}
\description{
See \url{https://clojuredocs.org/clojure.core/case}.
}
\examples{
caseveq(x,
          Inf,            "infinity",
          as.numeric(NA), "not available",
                          "other")
# Is transformed to:
# ifelse(x == Inf, "infinity",
#        ifelse(x == as.numeric(NA), "not available",
#                                     "other"))
}

